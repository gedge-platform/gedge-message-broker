// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gs-gRPC.proto

package gsgRPC

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GsRequest struct {
	Greeting             string   `protobuf:"bytes,1,opt,name=greeting,proto3" json:"greeting,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GsRequest) Reset()         { *m = GsRequest{} }
func (m *GsRequest) String() string { return proto.CompactTextString(m) }
func (*GsRequest) ProtoMessage()    {}
func (*GsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_835020e681461295, []int{0}
}

func (m *GsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GsRequest.Unmarshal(m, b)
}
func (m *GsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GsRequest.Marshal(b, m, deterministic)
}
func (m *GsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GsRequest.Merge(m, src)
}
func (m *GsRequest) XXX_Size() int {
	return xxx_messageInfo_GsRequest.Size(m)
}
func (m *GsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GsRequest proto.InternalMessageInfo

func (m *GsRequest) GetGreeting() string {
	if m != nil {
		return m.Greeting
	}
	return ""
}

type GsResponse struct {
	Reply                string   `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GsResponse) Reset()         { *m = GsResponse{} }
func (m *GsResponse) String() string { return proto.CompactTextString(m) }
func (*GsResponse) ProtoMessage()    {}
func (*GsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_835020e681461295, []int{1}
}

func (m *GsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GsResponse.Unmarshal(m, b)
}
func (m *GsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GsResponse.Marshal(b, m, deterministic)
}
func (m *GsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GsResponse.Merge(m, src)
}
func (m *GsResponse) XXX_Size() int {
	return xxx_messageInfo_GsResponse.Size(m)
}
func (m *GsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GsResponse proto.InternalMessageInfo

func (m *GsResponse) GetReply() string {
	if m != nil {
		return m.Reply
	}
	return ""
}

func init() {
	proto.RegisterType((*GsRequest)(nil), "gsgRPC.GsRequest")
	proto.RegisterType((*GsResponse)(nil), "gsgRPC.GsResponse")
}

func init() { proto.RegisterFile("gs-gRPC.proto", fileDescriptor_835020e681461295) }

var fileDescriptor_835020e681461295 = []byte{
	// 143 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0x2f, 0xd6, 0x4d,
	0x0f, 0x0a, 0x70, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4b, 0x2f, 0x06, 0xf1, 0x94,
	0xd4, 0xb9, 0x38, 0xdd, 0x8b, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0xa4, 0xb8, 0x38,
	0xd2, 0x8b, 0x52, 0x53, 0x4b, 0x32, 0xf3, 0xd2, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0xe0,
	0x7c, 0x25, 0x25, 0x2e, 0x2e, 0x90, 0xc2, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0x21, 0x11, 0x2e,
	0xd6, 0xa2, 0xd4, 0x82, 0x9c, 0x4a, 0xa8, 0x32, 0x08, 0xc7, 0xc8, 0x1a, 0x64, 0x58, 0x70, 0x6a,
	0x51, 0x59, 0x66, 0x72, 0xaa, 0x90, 0x1e, 0x17, 0x6b, 0x70, 0x62, 0xa5, 0x7b, 0xb1, 0x90, 0xa0,
	0x1e, 0xc4, 0x2e, 0x3d, 0xb8, 0x45, 0x52, 0x42, 0xc8, 0x42, 0x10, 0x23, 0x93, 0xd8, 0xc0, 0x0e,
	0x33, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x8c, 0x3a, 0xf7, 0x10, 0xa9, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GsServiceClient is the client API for GsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GsServiceClient interface {
	SayGs(ctx context.Context, in *GsRequest, opts ...grpc.CallOption) (*GsResponse, error)
}

type gsServiceClient struct {
	cc *grpc.ClientConn
}

func NewGsServiceClient(cc *grpc.ClientConn) GsServiceClient {
	return &gsServiceClient{cc}
}

func (c *gsServiceClient) SayGs(ctx context.Context, in *GsRequest, opts ...grpc.CallOption) (*GsResponse, error) {
	out := new(GsResponse)
	err := c.cc.Invoke(ctx, "/gsgRPC.GsService/SayGs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GsServiceServer is the server API for GsService service.
type GsServiceServer interface {
	SayGs(context.Context, *GsRequest) (*GsResponse, error)
}

// UnimplementedGsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGsServiceServer struct {
}

func (*UnimplementedGsServiceServer) SayGs(ctx context.Context, req *GsRequest) (*GsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayGs not implemented")
}

func RegisterGsServiceServer(s *grpc.Server, srv GsServiceServer) {
	s.RegisterService(&_GsService_serviceDesc, srv)
}

func _GsService_SayGs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GsServiceServer).SayGs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gsgRPC.GsService/SayGs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GsServiceServer).SayGs(ctx, req.(*GsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gsgRPC.GsService",
	HandlerType: (*GsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayGs",
			Handler:    _GsService_SayGs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gs-gRPC.proto",
}
